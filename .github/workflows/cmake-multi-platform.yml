# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      matrix:
        os: [macos-latest, ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++          
        exclude:
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Python setup
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' 
        cache: 'pip' # caching pip dependencies

    - name: Pip install
      run: |
          pip install setuptools torch        

    - name: Install Clang - Linux
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang' }}
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x ./llvm.sh
        sudo ./llvm.sh 20

    - name: Python setup - Linux / GCC
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc' }}
      run: >
        CMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        CMAKE_C_COMPILER=${{ matrix.c_compiler }}
        CMAKE_BUILD_TYPE=${{ matrix.build_type }}
        LD_LIBRARY_PATH=/usr/lib/python3.12/site-packages/torch.libs/
        Torch_DIR=/usr/lib/python3.12/site-packages/torch/share/cmake/Torch
        python3 setup.py develop

    # - name: Configure CMake - Linux / Clang
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   if: ${{ matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang' }}
    #   run: >
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
    #     -DCMAKE_CXX_COMPILER=clang++-17
    #     -DCMAKE_C_COMPILER=clang-17
    #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -DIGANET_BUILD_UNITTESTS=ON
    #     -DTorch_DIR=$HOME/libtorch/share/cmake/Torch
    #     -DIGANET_WITH_OPENMP=OFF
    #     -S ${{ github.workspace }}

    # - name: Configure CMake - MacOS / Clang
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   if: ${{ matrix.os == 'macos-latest' && matrix.c_compiler == 'clang' }}
    #   run: >
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
    #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -DIGANET_BUILD_UNITTESTS=ON
    #     -DTorch_DIR=$HOME/libtorch/share/cmake/Torch
    #     -DIGANET_WITH_OPENMP=OFF
    #     -S ${{ github.workspace }}

    # - name: Configure CMake - Windows / Cl
    #   if: matrix.os == 'windows-latest'
    #   run: >
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
    #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -DIGANET_BUILD_UNITTESTS=OFF
    #     -DTorch_DIR=C:\libtorch\share\cmake\Torch
    #     -DIGANET_WITH_OPENMP=OFF
    #     -S ${{ github.workspace }}

    # - name: Build
    #   # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
